dL <- (theta * Fl * S) / (1 + h2 * S) - #oviposition
n1 * S * S * (1 - (S / (S + h1 * L))) * (c * i / (1 + h * c * (i + Fl)) + (c * Fl) / (1 + h * c * (Fl + i))) - #food effect on transition
alpha * L * S / (1+S)  #mortality
dF <- n1 * S * S * (1 - S / (S + h1 * L)) * (c * i / (1 + h * c * (i + Fl)) + c * Fl / (1 + h * c * (i + Fl)) ) -
n2 * c * Fl * S / t(1 + h * c * (Fl + i)) - alpha1 * Fl * S / (1+S)
#return(list(c(S = dS, C = dC)))
return(list(c(S = dS,
L = dL,
Fl = dF)))
})
}
#condicoes iniciais
y0 <- c(S = 1, L = 1, Fl = 1)
#parametros
r <- 1.1         # intrinsic growth rate of the plant
K <- 100         # carrying capacity is it per plant
n <- 0.2       # growth rate from carnivory
n1 <- 1        # growth rate for from ovoposition (fertility rate)
n2 <- 1        # effect on the fly from capture
c <- 1         # carnivory investment/intensity
h <- 1         # handling effect
h1 <- 3        # theft efficiency
h2 <- 1        # effect of fly capture on the fly
i <- 1         # insect
e <- 1         # carnivory cost
theta <- 0.8     # ovoposition rate
alpha <- 0.2  # larvae mortality rate
alpha1 <- 0.01 # mortality rate
parms_pp <-  c(r, K, n, n1, n2, c, h, h1, h2, i, e, theta, alpha, alpha1)
# pupae emerge within 3 to 5 days
##running the numerical solution from time 1 to 1000
out <- ode(y = y0, times = seq(from = 1, to = 2000 , by = 0.5),
func = Predator_prey, parms = parms_pp)
head(out)
##plotting the solution
{
matplot(
x = out[, 1],
y = out[, 2:4],
type = "l",
lwd = 2,
lty = 1,
col = c("blue", "darkgreen", "red"),
xlab = "Time",
ylab = "Population size"
)
legend(
"topright",
legend = c("S", "L", "Fl"),
lty = 1,
lwd = 2,
col = c("blue", "darkgreen", "red")
)
}
tail(out)
K <- 10         # carrying capacity is it per plant
# initial conditions: also a named vector
library(deSolve)
Predator_prey <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dS <- r * S * (1 - S / K) + #logistic growth component
n * (S / (S + h1 * L)) * #proportion of food theft
(c * i / (1 + h * c * (i + Fl)) + #insect capture
c * Fl / (1 + h * c * (i + Fl))) - #fly capture
e * c * S #carnivory
dL <- (theta * Fl * S) / (1 + h2 * S) - #oviposition
n1 * S * S * (1 - (S / (S + h1 * L))) * (c * i / (1 + h * c * (i + Fl)) + (c * Fl) / (1 + h * c * (Fl + i))) - #food effect on transition
alpha * L * S / (1+S)  #mortality
dF <- n1 * S * S * (1 - S / (S + h1 * L)) * (c * i / (1 + h * c * (i + Fl)) + c * Fl / (1 + h * c * (i + Fl)) ) -
n2 * c * Fl * S / t(1 + h * c * (Fl + i)) - alpha1 * Fl * S / (1+S)
#return(list(c(S = dS, C = dC)))
return(list(c(S = dS,
L = dL,
Fl = dF)))
})
}
#condicoes iniciais
y0 <- c(S = 1, L = 1, Fl = 1)
#parametros
r <- 1.1         # intrinsic growth rate of the plant
K <- 10         # carrying capacity is it per plant
n <- 0.2       # growth rate from carnivory
n1 <- 1        # growth rate for from ovoposition (fertility rate)
n2 <- 1        # effect on the fly from capture
c <- 1         # carnivory investment/intensity
h <- 1         # handling effect
h1 <- 3        # theft efficiency
h2 <- 1        # effect of fly capture on the fly
i <- 1         # insect
e <- 1         # carnivory cost
theta <- 0.8     # ovoposition rate
alpha <- 0.2  # larvae mortality rate
alpha1 <- 0.01 # mortality rate
parms_pp <-  c(r, K, n, n1, n2, c, h, h1, h2, i, e, theta, alpha, alpha1)
# pupae emerge within 3 to 5 days
##running the numerical solution from time 1 to 1000
out <- ode(y = y0, times = seq(from = 1, to = 2000 , by = 0.5),
func = Predator_prey, parms = parms_pp)
head(out)
##plotting the solution
{
matplot(
x = out[, 1],
y = out[, 2:4],
type = "l",
lwd = 2,
lty = 1,
col = c("blue", "darkgreen", "red"),
xlab = "Time",
ylab = "Population size"
)
legend(
"topright",
legend = c("S", "L", "Fl"),
lty = 1,
lwd = 2,
col = c("blue", "darkgreen", "red")
)
}
tail(out)
# initial conditions: also a named vector
library(deSolve)
Predator_prey <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dS <- r * S * (1 - S / K) + #logistic growth component
n * (S / (S + h1 * L)) * #proportion of food theft
(c * i / (1 + h * c * (i + Fl)) + #insect capture
c * Fl / (1 + h * c * (i + Fl))) - #fly capture
e * c * S #carnivory
dL <- (theta * Fl * S) / (1 + h2 * S) - #oviposition
n1 * S * S * (1 - (S / (S + h1 * L))) * (c * i / (1 + h * c * (i + Fl)) + (c * Fl) / (1 + h * c * (Fl + i))) - #food effect on transition
alpha * L * S / (1+S)  #mortality
dF <- n1 * S * S * (1 - S / (S + h1 * L)) * (c * i / (1 + h * c * (i + Fl)) + c * Fl / (1 + h * c * (i + Fl)) ) -
n2 * c * Fl * S / t(1 + h * c * (Fl + i)) - alpha1 * Fl * S / (1+S)
#return(list(c(S = dS, C = dC)))
return(list(c(S = dS,
L = dL,
Fl = dF)))
})
}
#condicoes iniciais
y0 <- c(S = 1, L = 1, Fl = 1)
#parametros
r <- 1.1         # intrinsic growth rate of the plant
K <- 10         # carrying capacity is it per plant
n <- 0.2       # growth rate from carnivory
n1 <- 1        # growth rate for from ovoposition (fertility rate)
n2 <- 1        # effect on the fly from capture
c <- 1         # carnivory investment/intensity
h <- 1         # handling effect
h1 <- 3        # theft efficiency
h2 <- 1        # effect of fly capture on the fly
i <- 100         # insect
e <- 1         # carnivory cost
theta <- 0.8     # ovoposition rate
alpha <- 0.2  # larvae mortality rate
alpha1 <- 0.01 # mortality rate
parms_pp <-  c(r, K, n, n1, n2, c, h, h1, h2, i, e, theta, alpha, alpha1)
# pupae emerge within 3 to 5 days
##running the numerical solution from time 1 to 1000
out <- ode(y = y0, times = seq(from = 1, to = 2000 , by = 0.5),
func = Predator_prey, parms = parms_pp)
head(out)
##plotting the solution
{
matplot(
x = out[, 1],
y = out[, 2:4],
type = "l",
lwd = 2,
lty = 1,
col = c("blue", "darkgreen", "red"),
xlab = "Time",
ylab = "Population size"
)
legend(
"topright",
legend = c("S", "L", "Fl"),
lty = 1,
lwd = 2,
col = c("blue", "darkgreen", "red")
)
}
tail(out)
# initial conditions: also a named vector
library(deSolve)
Predator_prey <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dS <- r * S * (1 - S / K) + #logistic growth component
n * (S / (S + h1 * L)) * #proportion of food theft
(c * i / (1 + h * c * (i + Fl)) + #insect capture
c * Fl / (1 + h * c * (i + Fl))) - #fly capture
e * c * S #carnivory
dL <- (theta * Fl * S) / (1 + h2 * S) - #oviposition
n1 * S * S * (1 - (S / (S + h1 * L))) * (c * i / (1 + h * c * (i + Fl)) + (c * Fl) / (1 + h * c * (Fl + i))) - #food effect on transition
alpha * L * S / (1+S)  #mortality
dF <- n1 * S * S * (1 - S / (S + h1 * L)) * (c * i / (1 + h * c * (i + Fl)) + c * Fl / (1 + h * c * (i + Fl)) ) -
n2 * c * Fl * S / t(1 + h * c * (Fl + i)) - alpha1 * Fl * S / (1+S)
#return(list(c(S = dS, C = dC)))
return(list(c(S = dS,
L = dL,
Fl = dF)))
})
}
#condicoes iniciais
y0 <- c(S = 1, L = 1, Fl = 1)
#parametros
r <- 1.1         # intrinsic growth rate of the plant
K <- 10         # carrying capacity is it per plant
n <- 0.2       # growth rate from carnivory
n1 <- 1        # growth rate for from ovoposition (fertility rate)
n2 <- 1        # effect on the fly from capture
c <- 1         # carnivory investment/intensity
h <- 0.1         # handling effect
h1 <- 3        # theft efficiency
h2 <- 1        # effect of fly capture on the fly
i <- 100         # insect
e <- 1         # carnivory cost
theta <- 0.8     # ovoposition rate
alpha <- 0.2  # larvae mortality rate
alpha1 <- 0.01 # mortality rate
parms_pp <-  c(r, K, n, n1, n2, c, h, h1, h2, i, e, theta, alpha, alpha1)
# pupae emerge within 3 to 5 days
##running the numerical solution from time 1 to 1000
out <- ode(y = y0, times = seq(from = 1, to = 2000 , by = 0.5),
func = Predator_prey, parms = parms_pp)
head(out)
##plotting the solution
{
matplot(
x = out[, 1],
y = out[, 2:4],
type = "l",
lwd = 2,
lty = 1,
col = c("blue", "darkgreen", "red"),
xlab = "Time",
ylab = "Population size"
)
legend(
"topright",
legend = c("S", "L", "Fl"),
lty = 1,
lwd = 2,
col = c("blue", "darkgreen", "red")
)
}
tail(out)
# initial conditions: also a named vector
library(deSolve)
Predator_prey <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dS <- r * S * (1 - S / K) + #logistic growth component
n * (S / (S + h1 * L)) * #proportion of food theft
(c * i / (1 + h * c * (i + Fl)) + #insect capture
c * Fl / (1 + h * c * (i + Fl))) - #fly capture
e * c * S #carnivory
dL <- (theta * Fl * S) / (1 + h2 * S) - #oviposition
n1 * S * S * (1 - (S / (S + h1 * L))) * (c * i / (1 + h * c * (i + Fl)) + (c * Fl) / (1 + h * c * (Fl + i))) - #food effect on transition
alpha * L * S / (1+S)  #mortality
dF <- n1 * S * S * (1 - S / (S + h1 * L)) * (c * i / (1 + h * c * (i + Fl)) + c * Fl / (1 + h * c * (i + Fl)) ) -
n2 * c * Fl * S / t(1 + h * c * (Fl + i)) - alpha1 * Fl * S / (1+S)
#return(list(c(S = dS, C = dC)))
return(list(c(S = dS,
L = dL,
Fl = dF)))
})
}
#condicoes iniciais
y0 <- c(S = 1, L = 1, Fl = 1)
#parametros
r <- 1.1         # intrinsic growth rate of the plant
K <- 10         # carrying capacity is it per plant
n <- 0.2       # growth rate from carnivory
n1 <- 1        # growth rate for from ovoposition (fertility rate)
n2 <- 1        # effect on the fly from capture
c <- 1         # carnivory investment/intensity
h <- 0.1         # handling effect
h1 <- 3        # theft efficiency
h2 <- 4        # effect of fly capture on the fly
i <- 100         # insect
e <- 1         # carnivory cost
theta <- 0.8     # ovoposition rate
alpha <- 0.2  # larvae mortality rate
alpha1 <- 0.01 # mortality rate
parms_pp <-  c(r, K, n, n1, n2, c, h, h1, h2, i, e, theta, alpha, alpha1)
# pupae emerge within 3 to 5 days
##running the numerical solution from time 1 to 1000
out <- ode(y = y0, times = seq(from = 1, to = 2000 , by = 0.5),
func = Predator_prey, parms = parms_pp)
head(out)
##plotting the solution
{
matplot(
x = out[, 1],
y = out[, 2:4],
type = "l",
lwd = 2,
lty = 1,
col = c("blue", "darkgreen", "red"),
xlab = "Time",
ylab = "Population size"
)
legend(
"topright",
legend = c("S", "L", "Fl"),
lty = 1,
lwd = 2,
col = c("blue", "darkgreen", "red")
)
}
tail(out)
# initial conditions: also a named vector
library(deSolve)
Predator_prey <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dS <- r * S * (1 - S / K) + #logistic growth component
n * (S / (S + h1 * L)) * #proportion of food theft
(c * i / (1 + h * c * (i + Fl)) + #insect capture
c * Fl / (1 + h * c * (i + Fl))) - #fly capture
e * c * S #carnivory
dL <- (theta * Fl * S) / (1 + h2 * S) - #oviposition
n1 * S * S * (1 - (S / (S + h1 * L))) * (c * i / (1 + h * c * (i + Fl)) + (c * Fl) / (1 + h * c * (Fl + i))) - #food effect on transition
alpha * L * S / (1+S)  #mortality
dF <- n1 * S * S * (1 - S / (S + h1 * L)) * (c * i / (1 + h * c * (i + Fl)) + c * Fl / (1 + h * c * (i + Fl)) ) -
n2 * c * Fl * S / t(1 + h * c * (Fl + i)) - alpha1 * Fl * S / (1+S)
#return(list(c(S = dS, C = dC)))
return(list(c(S = dS,
L = dL,
Fl = dF)))
})
}
#condicoes iniciais
y0 <- c(S = 1, L = 1, Fl = 1)
#parametros
r <- 1         # intrinsic growth rate of the plant
K <- 10         # carrying capacity is it per plant
n <- 0.2       # growth rate from carnivory
n1 <- 1        # growth rate for from ovoposition (fertility rate)
n2 <- 1        # effect on the fly from capture
c <- 1         # carnivory investment/intensity
h <- 0.1         # handling effect
h1 <- 3        # theft efficiency
h2 <- 4        # effect of fly capture on the fly
i <- 100         # insect
e <- 1         # carnivory cost
theta <- 0.8     # ovoposition rate
alpha <- 0.2  # larvae mortality rate
alpha1 <- 0.01 # mortality rate
parms_pp <-  c(r, K, n, n1, n2, c, h, h1, h2, i, e, theta, alpha, alpha1)
# pupae emerge within 3 to 5 days
##running the numerical solution from time 1 to 1000
out <- ode(y = y0, times = seq(from = 1, to = 2000 , by = 0.5),
func = Predator_prey, parms = parms_pp)
head(out)
##plotting the solution
{
matplot(
x = out[, 1],
y = out[, 2:4],
type = "l",
lwd = 2,
lty = 1,
col = c("blue", "darkgreen", "red"),
xlab = "Time",
ylab = "Population size"
)
legend(
"topright",
legend = c("S", "L", "Fl"),
lty = 1,
lwd = 2,
col = c("blue", "darkgreen", "red")
)
}
tail(out)
# initial conditions: also a named vector
library(deSolve)
Predator_prey <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dS <- r * S * (1 - S / K) + #logistic growth component
n * (S / (S + h1 * L)) * #proportion of food theft
(c * i / (1 + h * c * (i + Fl)) + #insect capture
c * Fl / (1 + h * c * (i + Fl))) - #fly capture
e * c * S #carnivory
dL <- (theta * Fl * S) / (1 + h2 * S) - #oviposition
n1 * S * S * (1 - (S / (S + h1 * L))) * (c * i / (1 + h * c * (i + Fl)) + (c * Fl) / (1 + h * c * (Fl + i))) - #food effect on transition
alpha * L * S / (1+S)  #mortality
dF <- n1 * S * S * (1 - S / (S + h1 * L)) * (c * i / (1 + h * c * (i + Fl)) + c * Fl / (1 + h * c * (i + Fl)) ) -
n2 * c * Fl * S / t(1 + h * c * (Fl + i)) - alpha1 * Fl * S / (1+S)
#return(list(c(S = dS, C = dC)))
return(list(c(S = dS,
L = dL,
Fl = dF)))
})
}
#condicoes iniciais
y0 <- c(S = 1, L = 1, Fl = 1)
#parametros
r <- 1         # intrinsic growth rate of the plant
K <- 10         # carrying capacity is it per plant
n <- 0.2       # growth rate from carnivory
n1 <- 1        # growth rate for from ovoposition (fertility rate)
n2 <- 1        # effect on the fly from capture
c <- 1         # carnivory investment/intensity
h <- 0.1         # handling effect
h1 <- 3        # theft efficiency
h2 <- 4        # effect of fly capture on the fly
i <- 100         # insect
e <- 1         # carnivory cost
theta <- 0.8     # ovoposition rate
alpha <- 0.2  # larvae mortality rate
alpha1 <- 0.01 # mortality rate
parms_pp <-  c(r, K, n, n1, n2, c, h, h1, h2, i, e, theta, alpha, alpha1)
# pupae emerge within 3 to 5 days
##running the numerical solution from time 1 to 1000
out <- ode(y = y0, times = seq(from = 1, to = 2000 , by = 0.5),
func = Predator_prey, parms = parms_pp)
head(out)
##plotting the solution
{
matplot(
x = out[, 1],
y = out[, 2:4],
type = "l",
lwd = 2,
lty = 1,
col = c("blue", "darkgreen", "red"),
xlab = "Time",
ylab = "Population size"
)
legend(
"topright",
legend = c("S", "L", "Fl"),
lty = 1,
lwd = 2,
col = c("blue", "darkgreen", "red")
)
}
tail(out)
setwd("/home/EvIBM/position")
file.names=dir()
file.names
ind.loc=data.frame()
for (i in 1:length(file.names)){
data.loc=read.csv(paste(file.names[i]), head=FALSE, sep=";")
data.loc=cbind(data.loc,rep(i,dim(data.loc)[1])) # indexing time as a sequence of 1 to the number of files of individuals locations
ind.loc=rbind(ind.loc, data.loc)
}
data.loc
library(ggplot2)
setwd("/Home/EvIBM") # change to your folders' names
install.packages("ggplot2")
install.packages("ggplot2")
setwd("/home/EvIBM/position")
file.names=dir()
setwd("/home/EvIBM/position")
file.names=dir()
file.names
ind.loc=data.frame()
for (i in 1:length(file.names)){
data.loc=read.csv(paste(file.names[i]), head=FALSE, sep=";")
data.loc=cbind(data.loc,rep(i,dim(data.loc)[1])) # indexing time as a sequence of 1 to the number of files of individuals locations
ind.loc=rbind(ind.loc, data.loc)
}
data.loc
file.names
ind.loc=data.frame()
for (i in 1:length(file.names)){
data.loc=read.csv(paste(file.names[i]), head=FALSE, sep=";")
data.loc=cbind(data.loc,rep(i,dim(data.loc)[1])) # indexing time as a sequence of 1 to the number of files of individuals locations
ind.loc=rbind(ind.loc, data.loc)
}
setwd("/home/EvIBM/position")
file.names=dir()
file.names
ind.loc=data.frame()
for (i in 1:length(file.names)){
data.loc=read.csv(paste(file.names[i]), head=FALSE, sep=";")
data.loc=cbind(data.loc,rep(i,dim(data.loc)[1])) # indexing time as a sequence of 1 to the number of files of individuals locations
ind.loc=rbind(ind.loc, data.loc)
}
setwd("/home/EvIBM/position")
file.names=dir()
setwd("/Home/EvIBM") # change to your folders' names
file.names=dir()
setwd("/Home/EvIBM") # change to your folders' names
setwd("/home/EvIBM/position")
file.names=dir()
library(ggplot2)
number.spp=data.frame()
setwd("/home/EvIBM/position")
file.names=dir()
file.names
ind.loc=data.frame()
setwd("home/EvIBM/position")
file.names=dir()
setwd("/home/EvIBM/position")
file.names=dir()
demo()
setwd("./position")
file.names=dir()
setwd("./position")
setwd("/position")
setwd("position/")
setwd("./position/")
setwd("../EvIBM/position/")
setwd("./EvIBM/position")
setwd("./EvIBM/position")
setwd("/home/irinalerner/EvIBM/position")
file.names=dir()
file.names
